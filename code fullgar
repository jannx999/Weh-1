import RPi.GPIO as GPIO
import time
# Menüdarstellung - Auflistung der Fahrtrichtungen
print(16*"#","MENÜ",16*"#")
print()
print(" vorwärts: 		fwd")
print(" rückwärts: 		bwd")
print(" linksdrehen: 		left")
print(" rechtsdrehen: 		right")
print()
print(38*"#")
print()

# Benutzereingabe - deklariert als userdirection
# Eine while-Schleife wird verwendet, um eine gültige Benutzereingabe zu erhalten.
# Die if-Anweisung überprüft, ob die Eingabe in der Liste ["fwd", "bwd", "left", "right"] enthalten ist.
# Wenn die Eingabe gültig ist, wird die Schleife mit break beendet.
while True:
    userdirection = input("Wählen Sie eine Fahrtrichtung durch \nEingabe des jeweiligen Kürzels aus: ")
    if userdirection in ["fwd", "bwd", "left", "right"]:
        break
    else:
        print("Ungültige Eingabe! Bitte wählen Sie eine der folgenden Optionen: fwd, bwd, left oder right.")

#GPIO.setwarnings(False)
# Pins für den Ultraschallsensor
GPIO_TRIGGER = 11
GPIO_ECHO = 13

# Pin für die rote LED
GPIO_LED = 29

# Setzen der Pin-Nummerierung und Festlegen der Pin-Eingabe und Ausgabe
GPIO.setmode(GPIO.BOARD)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.setup(GPIO_LED, GPIO.OUT)

def distance():
    # Senden des Trigger-Impulses an den Sensor
    GPIO.output(GPIO_TRIGGER, True)
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    start_time = time.time()
    stop_time = time.time()

    # Ermittlung der Start- und Stop-Zeit des Echos
    while GPIO.input(GPIO_ECHO) == 0:
        start_time = time.time()

    while GPIO.input(GPIO_ECHO) == 1:
        stop_time = time.time()

    # Berechnung der Entfernung basierend auf der Zeit des Echos
    time_elapsed = stop_time - start_time
    distance_cm = (time_elapsed * 34300) / 2

    return distance_cm

try:
    while True:
        dist = distance()
        print("Abstand: %.1f cm" % dist)

        # Wenn der Abstand weniger als 10 cm beträgt, lässt die LED aufleuchten und "Achtung!" wird geprintet
        if dist < 10:
            GPIO.output(GPIO_LED, True)
            print("Achtung!")
        else:
            GPIO.output(GPIO_LED, False)

        time.sleep(0.5)
        
        if dist < 30:
            GPIO.output(IN1, GPIO.LOW)
            GPIO.output(IN2, GPIO.LOW)
            GPIO.output(IN3, GPIO.LOW)
            GPIO.output(IN4, GPIO.LOW)

        else:
            GPIO.output(IN1, GPIO.HIGH)
            GPIO.output(IN2, GPIO.LOW)
            GPIO.output(IN3, GPIO.HIGH)
            GPIO.output(IN4, GPIO.LOW)
            
except KeyboardInterrupt:
    # Zurücksetzen der Pins auf Standardwerte
    GPIO.cleanup()
# Pin definitions
motor1_pin1 = 31  # Input 1 of Motor 1
motor1_pin2 = 33  # Input 2 of Motor 1
motor2_pin1 = 35  # Input 1 of Motor 2
motor2_pin2 = 37  # Input 2 of Motor 2

# GPIO pin initialization
GPIO.setmode(GPIO.BOARD)
GPIO.setup(motor1_pin1, GPIO.OUT)
GPIO.setup(motor1_pin2, GPIO.OUT)
GPIO.setup(motor2_pin1, GPIO.OUT)
GPIO.setup(motor2_pin2, GPIO.OUT)

# Function for gradually accelerating the motors
def accelerate_motors():
    frequency = 50  # PWM frequency
    motor1_pwm = GPIO.PWM(motor1_pin1, frequency)
    motor2_pwm = GPIO.PWM(motor2_pin1, frequency)
    motor1_pwm.start(0)  # Start PWM for Motor 1
    motor2_pwm.start(0)  # Start PWM for Motor 2

    try:
        for duty_cycle in range(0, 101):  # Gradually increase the duty cycle from 0% to 100%
            motor1_pwm.ChangeDutyCycle(duty_cycle)
            motor2_pwm.ChangeDutyCycle(duty_cycle)
            time.sleep(0.1)  # Wait time between steps (here 0.1 seconds)

    except KeyboardInterrupt:
        pass
    
    motor1_pwm.stop()  # Stoppen der PWM für Motor 1
    motor2_pwm.stop()  # Stoppen der PWM für Motor 2


try:
    while True:
        direction = input("Enter a direction (w=forward, s=backward, a=left, d=right): ")

        if direction == "w":
            # Move forward
            accelerate_motors()
            GPIO.output(motor1_pin1, GPIO.HIGH)
            GPIO.output(motor1_pin2, GPIO.LOW)
            GPIO.output(motor2_pin1, GPIO.HIGH)
            GPIO.output(motor2_pin2, GPIO.LOW)
        elif direction == "s":
            # Move backward
            GPIO.output(motor1_pin1, GPIO.LOW)
            GPIO.output(motor1_pin2, GPIO.HIGH)
            GPIO.output(motor2_pin1, GPIO.LOW)
            GPIO.output(motor2_pin2, GPIO.HIGH)
        elif direction == "a":
            # Turn left
            GPIO.output(motor1_pin1, GPIO.LOW)
            GPIO.output(motor1_pin2, GPIO.HIGH)
            GPIO.output(motor2_pin1, GPIO.HIGH)
            GPIO.output(motor2_pin2, GPIO.LOW)
        elif direction == "d":
            # Turn right
            GPIO.output(motor1_pin1, GPIO.HIGH)
            GPIO.output(motor1_pin2, GPIO.LOW)
            GPIO.output(motor2_pin1, GPIO.LOW)
            GPIO.output(motor2_pin2, GPIO.HIGH)
        else:
            # Invalid input
            print("Invalid direction!")
            continue

except KeyboardInterrupt:
    # Stop the motors
    GPIO.output(motor1_pin1, GPIO.LOW)
    GPIO.output(motor1_pin2, GPIO.LOW)
    GPIO.output(motor2_pin1, GPIO.LOW)
    GPIO.output(motor2_pin2, GPIO.LOW)
